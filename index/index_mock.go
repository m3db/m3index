// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3ninx/index/types.go

package index

import (
	gomock "github.com/golang/mock/gomock"
	doc "github.com/m3db/m3ninx/doc"
	postings "github.com/m3db/m3ninx/postings"
	regexp "regexp"
)

// Mock of Index interface
type MockIndex struct {
	ctrl     *gomock.Controller
	recorder *_MockIndexRecorder
}

// Recorder for MockIndex (not exported)
type _MockIndexRecorder struct {
	mock *MockIndex
}

func NewMockIndex(ctrl *gomock.Controller) *MockIndex {
	mock := &MockIndex{ctrl: ctrl}
	mock.recorder = &_MockIndexRecorder{mock}
	return mock
}

func (_m *MockIndex) EXPECT() *_MockIndexRecorder {
	return _m.recorder
}

func (_m *MockIndex) Insert(d doc.Document) error {
	ret := _m.ctrl.Call(_m, "Insert", d)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIndexRecorder) Insert(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Insert", arg0)
}

func (_m *MockIndex) Snapshot() (Snapshot, error) {
	ret := _m.ctrl.Call(_m, "Snapshot")
	ret0, _ := ret[0].(Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIndexRecorder) Snapshot() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Snapshot")
}

func (_m *MockIndex) Seal() error {
	ret := _m.ctrl.Call(_m, "Seal")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIndexRecorder) Seal() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Seal")
}

func (_m *MockIndex) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIndexRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *_MockSnapshotRecorder
}

// Recorder for MockSnapshot (not exported)
type _MockSnapshotRecorder struct {
	mock *MockSnapshot
}

func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &_MockSnapshotRecorder{mock}
	return mock
}

func (_m *MockSnapshot) EXPECT() *_MockSnapshotRecorder {
	return _m.recorder
}

func (_m *MockSnapshot) Readers() []Reader {
	ret := _m.ctrl.Call(_m, "Readers")
	ret0, _ := ret[0].([]Reader)
	return ret0
}

func (_mr *_MockSnapshotRecorder) Readers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Readers")
}

func (_m *MockSnapshot) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSnapshotRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of Reader interface
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *_MockReaderRecorder
}

// Recorder for MockReader (not exported)
type _MockReaderRecorder struct {
	mock *MockReader
}

func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &_MockReaderRecorder{mock}
	return mock
}

func (_m *MockReader) EXPECT() *_MockReaderRecorder {
	return _m.recorder
}

func (_m *MockReader) MatchExact(name []byte, value []byte) (postings.List, error) {
	ret := _m.ctrl.Call(_m, "MatchExact", name, value)
	ret0, _ := ret[0].(postings.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockReaderRecorder) MatchExact(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MatchExact", arg0, arg1)
}

func (_m *MockReader) MatchRegex(name []byte, pattern []byte, re *regexp.Regexp) (postings.List, error) {
	ret := _m.ctrl.Call(_m, "MatchRegex", name, pattern, re)
	ret0, _ := ret[0].(postings.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockReaderRecorder) MatchRegex(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MatchRegex", arg0, arg1, arg2)
}

func (_m *MockReader) Docs(pl postings.List, names [][]byte) (doc.Iterator, error) {
	ret := _m.ctrl.Call(_m, "Docs", pl, names)
	ret0, _ := ret[0].(doc.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockReaderRecorder) Docs(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Docs", arg0, arg1)
}

func (_m *MockReader) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockReaderRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
